###### 可实现内容如下 ######
### 基础内容 ###
1.定义环，理想，商环
2.定义模，向量
3.求模的零化子
4.多项式分解

### 高级内容 ###
1.准素分解
2.代数扩张，整扩张，超越扩张（素域上）
3.代数无关性
4.计算方程组的公共零点
5.计算代数基

这些函数在官方文档中有具体的编写算法及代码。












### 3.代数无关性 ###
LIB "sagbi.lib";
ring r= 0,(x,y),dp;
ideal I=x^2, xy-y2, xy2;
def DI = algebraicDependence(I,2); //用SAGBI构造性算法进行迭代，次数上限设置为2
setring DI; algDep; //检查是否得到代数相关（algDep为计算过程生成的理想，非0代表相关）
setring r; kill DI;  //清除变量DI，进行更高次的迭代测试
def DI = algebraicDependence(I,3);
setring DI; algDep; //仍然得到代数无关
map F = DI,x,y,x^2, xy-y2, xy2;
F(algDep); // we see that it is a dependence indeed
==> _[1]=0



### 4.计算方程组的公共零点 ###
LIB "solve.lib";
ring r=0,x(1..5),dp;
poly f0= x(1)^3+x(2)^2+x(3)^2+x(4)^2-x(5)^2;
poly f1= x(2)^3+x(1)^2+x(3)^2+x(4)^2-x(5)^2;
poly f2=x(3)^3+x(1)^2+x(2)^2+x(4)^2-x(5)^2;
poly f3=x(4)^2+x(1)^2+x(2)^2+x(3)^2-x(5)^2;
poly f4=x(5)^2+x(1)^2+x(2)^2+x(3)^2;
ideal i=f0,f1,f2,f3,f4;
ideal si=std(i);
//
// dimension of a solution set (here: 0) can be read from a Groebner bases
// (with respect to any global monomial ordering)
dim(si);
==> 0
//
// the number of complex solutions (counted with multiplicities) is:
vdim(si);
==> 108
//
// The given system has a multiple solution at the origin. We use facstd
// to compute equations for the non-zero solutions:
option(redSB);
ideal maxI=maxideal(1);
ideal j=sat(si,maxI)[1];  // output is Groebner basis
vdim(j);                  // number of non-zero solutions (with mult's)
==> 76
//
// We compute a triangular decomposition for the ideal I. This requires first
// the computation of a lexicographic Groebner basis (we use the FGLM
// conversion algorithm):
ring R=0,x(1..5),lp;
ideal j=fglm(r,j);
list L=triangMH(j);
size(L);                 // number of triangular components
==> 7
L[1];                    // the first component
==> _[1]=x(5)^2+1
==> _[2]=x(4)^2+2
==> _[3]=x(3)-1
==> _[4]=x(2)^2
==> _[5]=x(1)^2
//
// We compute floating point approximations for the solutions (with 30 digits)
def S=triang_solve(L,30);
==> 
==> // 'triang_solve' created a ring, in which a list rlist of numbers (the
==> // complex solutions) is stored.
==> // To access the list of complex solutions, type (if the name R was assig\
   ned
==> // to the return value):
==>         setring R; rlist; 
setring S;
size(rlist);             // number of different non-zero solutions
==> 28
rlist[1];                // the first solution
==> [1]:
==>    0
==> [2]:
==>    0
==> [3]:
==>    1
==> [4]:
==>    (-I*1.41421356237309504880168872421)
==> [5]:
==>    -I
//
// Alternatively, we could have applied directly the solve command:
setring r;
def T=solve(i,30,1,"nodisplay");  // compute all solutions with mult's
==> 
==> // 'solve' created a ring, in which a list SOL of numbers (the complex so\
   lutions)
==> // is stored.
==> // To access the list of complex solutions, type (if the name R was assig\
   ned
==> // to the return value):
==>         setring R; SOL; 
setring T;
size(SOL);               // number of different solutions
==> 4
SOL[1][1]; SOL[1][2];    // first solution and its multiplicity
==> [1]:
==>    [1]:
==>       1
==>    [2]:
==>       1
==>    [3]:
==>       1
==>    [4]:
==>       (i*2.449489742783178098197284074706)
==>    [5]:
==>       (i*1.732050807568877293527446341506)
==> [2]:
==>    [1]:
==>       1
==>    [2]:
==>       1
==>    [3]:
==>       1
==>    [4]:
==>       (-i*2.449489742783178098197284074706)
==>    [5]:
==>       (i*1.732050807568877293527446341506)
==> [3]:
==>    [1]:
==>       1
==>    [2]:
==>       1
==>    [3]:
==>       1
==>    [4]:
==>       (i*2.449489742783178098197284074706)
==>    [5]:
==>       (-i*1.732050807568877293527446341506)
==> [4]:
==>    [1]:
==>       1
==>    [2]:
==>       1
==>    [3]:
==>       1
==>    [4]:
==>       (-i*2.449489742783178098197284074706)
==>    [5]:
==>       (-i*1.732050807568877293527446341506)
==> 1
SOL[size(SOL)];          // solutions of highest multiplicity
==> [1]:
==>    [1]:
==>       [1]:
==>          0
==>       [2]:
==>          0
==>       [3]:
==>          0
==>       [4]:
==>          0
==>       [5]:
==>          0
==> [2]:
==>    32
//
// Or, we could remove the multiplicities first, by computing the
// radical:
setring r;
ideal k=std(radical(i));
vdim(k);                 // number of different complex solutions
==> 29
def T1=solve(k,30,"nodisplay");  // compute all solutions with mult's
==> 
==> // 'solve' created a ring, in which a list SOL of numbers (the complex so\
   lutions)
==> // is stored.
==> // To access the list of complex solutions, type (if the name R was assig\
   ned
==> // to the return value):
==>         setring R; SOL; 
setring T1;
size(SOL);               // number of different solutions
==> 29
SOL[1];
==> [1]:
==>    1
==> [2]:
==>    1
==> [3]:
==>    1
==> [4]:
==>    (-i*2.449489742783178098197284074706)
==> [5]:
==>    (-i*1.732050807568877293527446341506)